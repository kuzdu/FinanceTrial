//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      /// en translation: Bank Account
      ///
      /// Locales: en
      static let add_or_edit_segment_bank_account = Rswift.StringResource(key: "add_or_edit_segment_bank_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bank Account
      ///
      /// Locales: en
      static let dashboard_section_title_bank_account = Rswift.StringResource(key: "dashboard_section_title_bank_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cash
      ///
      /// Locales: en
      static let add_or_edit_segment_cash = Rswift.StringResource(key: "add_or_edit_segment_cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cash
      ///
      /// Locales: en
      static let dashboard_section_title_cash = Rswift.StringResource(key: "dashboard_section_title_cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Credit Card
      ///
      /// Locales: en
      static let add_or_edit_segment_credit_card = Rswift.StringResource(key: "add_or_edit_segment_credit_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Credit Card
      ///
      /// Locales: en
      static let dashboard_section_title_credit_card = Rswift.StringResource(key: "dashboard_section_title_credit_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dashboard
      ///
      /// Locales: en
      static let dashboard_title = Rswift.StringResource(key: "dashboard_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter Amount
      ///
      /// Locales: en
      static let add_or_edit_amount_placeholder = Rswift.StringResource(key: "add_or_edit_amount_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Expence
      ///
      /// Locales: en
      static let add_or_edit_segment_expence_title = Rswift.StringResource(key: "add_or_edit_segment_expence_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Income
      ///
      /// Locales: en
      static let add_or_edit_segment_income_title = Rswift.StringResource(key: "add_or_edit_segment_income_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select Account
      ///
      /// Locales: en
      static let add_or_edit_account_placeholder = Rswift.StringResource(key: "add_or_edit_account_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: en
      static let add_or_edit_category_placeholder = Rswift.StringResource(key: "add_or_edit_category_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: dividends
      ///
      /// Locales: en
      static let income_category_dividends = Rswift.StringResource(key: "income_category_dividends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: entertainment
      ///
      /// Locales: en
      static let expense_category_entertainment = Rswift.StringResource(key: "expense_category_entertainment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: grocery
      ///
      /// Locales: en
      static let expense_category_grocery = Rswift.StringResource(key: "expense_category_grocery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: gym
      ///
      /// Locales: en
      static let expense_category_gym = Rswift.StringResource(key: "expense_category_gym", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: health
      ///
      /// Locales: en
      static let expense_category_health = Rswift.StringResource(key: "expense_category_health", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: salary
      ///
      /// Locales: en
      static let income_category_salary = Rswift.StringResource(key: "income_category_salary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: tax
      ///
      /// Locales: en
      static let expense_category_tax = Rswift.StringResource(key: "expense_category_tax", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Bank Account
      ///
      /// Locales: en
      static func add_or_edit_segment_bank_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_segment_bank_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_segment_bank_account"
        }

        return NSLocalizedString("add_or_edit_segment_bank_account", bundle: bundle, comment: "")
      }

      /// en translation: Bank Account
      ///
      /// Locales: en
      static func dashboard_section_title_bank_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dashboard_section_title_bank_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dashboard_section_title_bank_account"
        }

        return NSLocalizedString("dashboard_section_title_bank_account", bundle: bundle, comment: "")
      }

      /// en translation: Cash
      ///
      /// Locales: en
      static func add_or_edit_segment_cash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_segment_cash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_segment_cash"
        }

        return NSLocalizedString("add_or_edit_segment_cash", bundle: bundle, comment: "")
      }

      /// en translation: Cash
      ///
      /// Locales: en
      static func dashboard_section_title_cash(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dashboard_section_title_cash", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dashboard_section_title_cash"
        }

        return NSLocalizedString("dashboard_section_title_cash", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card
      ///
      /// Locales: en
      static func add_or_edit_segment_credit_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_segment_credit_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_segment_credit_card"
        }

        return NSLocalizedString("add_or_edit_segment_credit_card", bundle: bundle, comment: "")
      }

      /// en translation: Credit Card
      ///
      /// Locales: en
      static func dashboard_section_title_credit_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dashboard_section_title_credit_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dashboard_section_title_credit_card"
        }

        return NSLocalizedString("dashboard_section_title_credit_card", bundle: bundle, comment: "")
      }

      /// en translation: Dashboard
      ///
      /// Locales: en
      static func dashboard_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dashboard_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dashboard_title"
        }

        return NSLocalizedString("dashboard_title", bundle: bundle, comment: "")
      }

      /// en translation: Enter Amount
      ///
      /// Locales: en
      static func add_or_edit_amount_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_amount_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_amount_placeholder"
        }

        return NSLocalizedString("add_or_edit_amount_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Expence
      ///
      /// Locales: en
      static func add_or_edit_segment_expence_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_segment_expence_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_segment_expence_title"
        }

        return NSLocalizedString("add_or_edit_segment_expence_title", bundle: bundle, comment: "")
      }

      /// en translation: Income
      ///
      /// Locales: en
      static func add_or_edit_segment_income_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_segment_income_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_segment_income_title"
        }

        return NSLocalizedString("add_or_edit_segment_income_title", bundle: bundle, comment: "")
      }

      /// en translation: Select Account
      ///
      /// Locales: en
      static func add_or_edit_account_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_account_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_account_placeholder"
        }

        return NSLocalizedString("add_or_edit_account_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: en
      static func add_or_edit_category_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_or_edit_category_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_or_edit_category_placeholder"
        }

        return NSLocalizedString("add_or_edit_category_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: dividends
      ///
      /// Locales: en
      static func income_category_dividends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("income_category_dividends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "income_category_dividends"
        }

        return NSLocalizedString("income_category_dividends", bundle: bundle, comment: "")
      }

      /// en translation: entertainment
      ///
      /// Locales: en
      static func expense_category_entertainment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expense_category_entertainment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expense_category_entertainment"
        }

        return NSLocalizedString("expense_category_entertainment", bundle: bundle, comment: "")
      }

      /// en translation: grocery
      ///
      /// Locales: en
      static func expense_category_grocery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expense_category_grocery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expense_category_grocery"
        }

        return NSLocalizedString("expense_category_grocery", bundle: bundle, comment: "")
      }

      /// en translation: gym
      ///
      /// Locales: en
      static func expense_category_gym(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expense_category_gym", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expense_category_gym"
        }

        return NSLocalizedString("expense_category_gym", bundle: bundle, comment: "")
      }

      /// en translation: health
      ///
      /// Locales: en
      static func expense_category_health(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expense_category_health", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expense_category_health"
        }

        return NSLocalizedString("expense_category_health", bundle: bundle, comment: "")
      }

      /// en translation: salary
      ///
      /// Locales: en
      static func income_category_salary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("income_category_salary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "income_category_salary"
        }

        return NSLocalizedString("income_category_salary", bundle: bundle, comment: "")
      }

      /// en translation: tax
      ///
      /// Locales: en
      static func expense_category_tax(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expense_category_tax", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expense_category_tax"
        }

        return NSLocalizedString("expense_category_tax", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
